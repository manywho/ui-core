/*!
    localForage -- Offline Storage, Improved
    Version 1.5.0
    https://localforage.github.io/localForage
    (c) 2013-2017 Mozilla, Apache License 2.0
*/
!function (a) { if ("object" == typeof exports && "undefined" != typeof module)
    module.exports = a();
else if ("function" == typeof define && define.amd)
    define([], a);
else {
    var b;
    b = "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this, b.localforage = a();
} }(function () { return function a(b, c, d) { function e(g, h) { if (!c[g]) {
    if (!b[g]) {
        var i = "function" == typeof require && require;
        if (!h && i)
            return i(g, !0);
        if (f)
            return f(g, !0);
        var j = new Error("Cannot find module '" + g + "'");
        throw j.code = "MODULE_NOT_FOUND", j;
    }
    var k = c[g] = { exports: {} };
    b[g][0].call(k.exports, function (a) { var c = b[g][1][a]; return e(c ? c : a); }, k, k.exports, a, b, c, d);
} return c[g].exports; } for (var f = "function" == typeof require && require, g = 0; g < d.length; g++)
    e(d[g]); return e; }({ 1: [function (a, b, c) { (function (a) {
            "use strict";
            function c() { k = !0; for (var a, b, c = l.length; c;) {
                for (b = l, l = [], a = -1; ++a < c;)
                    b[a]();
                c = l.length;
            } k = !1; }
            function d(a) { 1 !== l.push(a) || k || e(); }
            var e, f = a.MutationObserver || a.WebKitMutationObserver;
            if (f) {
                var g = 0, h = new f(c), i = a.document.createTextNode("");
                h.observe(i, { characterData: !0 }), e = function () { i.data = g = ++g % 2; };
            }
            else if (a.setImmediate || "undefined" == typeof a.MessageChannel)
                e = "document" in a && "onreadystatechange" in a.document.createElement("script") ? function () { var b = a.document.createElement("script"); b.onreadystatechange = function () { c(), b.onreadystatechange = null, b.parentNode.removeChild(b), b = null; }, a.document.documentElement.appendChild(b); } : function () { setTimeout(c, 0); };
            else {
                var j = new a.MessageChannel;
                j.port1.onmessage = c, e = function () { j.port2.postMessage(0); };
            }
            var k, l = [];
            b.exports = d;
        }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}); }, {}], 2: [function (a, b, c) {
            "use strict";
            function d() { }
            function e(a) { if ("function" != typeof a)
                throw new TypeError("resolver must be a function"); this.state = s, this.queue = [], this.outcome = void 0, a !== d && i(this, a); }
            function f(a, b, c) { this.promise = a, "function" == typeof b && (this.onFulfilled = b, this.callFulfilled = this.otherCallFulfilled), "function" == typeof c && (this.onRejected = c, this.callRejected = this.otherCallRejected); }
            function g(a, b, c) { o(function () { var d; try {
                d = b(c);
            }
            catch (b) {
                return p.reject(a, b);
            } d === a ? p.reject(a, new TypeError("Cannot resolve promise with itself")) : p.resolve(a, d); }); }
            function h(a) { var b = a && a.then; if (a && "object" == typeof a && "function" == typeof b)
                return function () { b.apply(a, arguments); }; }
            function i(a, b) { function c(b) { f || (f = !0, p.reject(a, b)); } function d(b) { f || (f = !0, p.resolve(a, b)); } function e() { b(d, c); } var f = !1, g = j(e); "error" === g.status && c(g.value); }
            function j(a, b) { var c = {}; try {
                c.value = a(b), c.status = "success";
            }
            catch (a) {
                c.status = "error", c.value = a;
            } return c; }
            function k(a) { return a instanceof this ? a : p.resolve(new this(d), a); }
            function l(a) { var b = new this(d); return p.reject(b, a); }
            function m(a) { function b(a, b) { function d(a) { g[b] = a, ++h !== e || f || (f = !0, p.resolve(j, g)); } c.resolve(a).then(d, function (a) { f || (f = !0, p.reject(j, a)); }); } var c = this; if ("[object Array]" !== Object.prototype.toString.call(a))
                return this.reject(new TypeError("must be an array")); var e = a.length, f = !1; if (!e)
                return this.resolve([]); for (var g = new Array(e), h = 0, i = -1, j = new this(d); ++i < e;)
                b(a[i], i); return j; }
            function n(a) { function b(a) { c.resolve(a).then(function (a) { f || (f = !0, p.resolve(h, a)); }, function (a) { f || (f = !0, p.reject(h, a)); }); } var c = this; if ("[object Array]" !== Object.prototype.toString.call(a))
                return this.reject(new TypeError("must be an array")); var e = a.length, f = !1; if (!e)
                return this.resolve([]); for (var g = -1, h = new this(d); ++g < e;)
                b(a[g]); return h; }
            var o = a(1), p = {}, q = ["REJECTED"], r = ["FULFILLED"], s = ["PENDING"];
            b.exports = c = e, e.prototype.catch = function (a) { return this.then(null, a); }, e.prototype.then = function (a, b) { if ("function" != typeof a && this.state === r || "function" != typeof b && this.state === q)
                return this; var c = new this.constructor(d); if (this.state !== s) {
                var e = this.state === r ? a : b;
                g(c, e, this.outcome);
            }
            else
                this.queue.push(new f(c, a, b)); return c; }, f.prototype.callFulfilled = function (a) { p.resolve(this.promise, a); }, f.prototype.otherCallFulfilled = function (a) { g(this.promise, this.onFulfilled, a); }, f.prototype.callRejected = function (a) { p.reject(this.promise, a); }, f.prototype.otherCallRejected = function (a) { g(this.promise, this.onRejected, a); }, p.resolve = function (a, b) { var c = j(h, b); if ("error" === c.status)
                return p.reject(a, c.value); var d = c.value; if (d)
                i(a, d);
            else {
                a.state = r, a.outcome = b;
                for (var e = -1, f = a.queue.length; ++e < f;)
                    a.queue[e].callFulfilled(b);
            } return a; }, p.reject = function (a, b) { a.state = q, a.outcome = b; for (var c = -1, d = a.queue.length; ++c < d;)
                a.queue[c].callRejected(b); return a; }, c.resolve = k, c.reject = l, c.all = m, c.race = n;
        }, { 1: 1 }], 3: [function (a, b, c) { (function (b) {
            "use strict";
            "function" != typeof b.Promise && (b.Promise = a(2));
        }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}); }, { 2: 2 }], 4: [function (a, b, c) {
            "use strict";
            function d(a, b) { if (!(a instanceof b))
                throw new TypeError("Cannot call a class as a function"); }
            function e() { try {
                if ("undefined" != typeof indexedDB)
                    return indexedDB;
                if ("undefined" != typeof webkitIndexedDB)
                    return webkitIndexedDB;
                if ("undefined" != typeof mozIndexedDB)
                    return mozIndexedDB;
                if ("undefined" != typeof OIndexedDB)
                    return OIndexedDB;
                if ("undefined" != typeof msIndexedDB)
                    return msIndexedDB;
            }
            catch (a) { } }
            function f() { try {
                if (!ga)
                    return !1;
                var a = "undefined" != typeof openDatabase && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform), b = "function" == typeof fetch && fetch.toString().indexOf("[native code") !== -1;
                return (!a || b) && "undefined" != typeof indexedDB && "undefined" != typeof IDBKeyRange;
            }
            catch (a) {
                return !1;
            } }
            function g() { return "function" == typeof openDatabase; }
            function h() { try {
                return "undefined" != typeof localStorage && "setItem" in localStorage && localStorage.setItem;
            }
            catch (a) {
                return !1;
            } }
            function i(a, b) { a = a || [], b = b || {}; try {
                return new Blob(a, b);
            }
            catch (f) {
                if ("TypeError" !== f.name)
                    throw f;
                for (var c = "undefined" != typeof BlobBuilder ? BlobBuilder : "undefined" != typeof MSBlobBuilder ? MSBlobBuilder : "undefined" != typeof MozBlobBuilder ? MozBlobBuilder : WebKitBlobBuilder, d = new c, e = 0; e < a.length; e += 1)
                    d.append(a[e]);
                return d.getBlob(b.type);
            } }
            function j(a, b) { b && a.then(function (a) { b(null, a); }, function (a) { b(a); }); }
            function k(a, b, c) { "function" == typeof b && a.then(b), "function" == typeof c && a.catch(c); }
            function l(a) { for (var b = a.length, c = new ArrayBuffer(b), d = new Uint8Array(c), e = 0; e < b; e++)
                d[e] = a.charCodeAt(e); return c; }
            function m(a) { return new ja(function (b) { var c = a.transaction(ka, "readwrite"), d = i([""]); c.objectStore(ka).put(d, "key"), c.onabort = function (a) { a.preventDefault(), a.stopPropagation(), b(!1); }, c.oncomplete = function () { var a = navigator.userAgent.match(/Chrome\/(\d+)/), c = navigator.userAgent.match(/Edge\//); b(c || !a || parseInt(a[1], 10) >= 43); }; }).catch(function () { return !1; }); }
            function n(a) { return "boolean" == typeof ha ? ja.resolve(ha) : m(a).then(function (a) { return ha = a; }); }
            function o(a) { var b = ia[a.name], c = {}; c.promise = new ja(function (a) { c.resolve = a; }), b.deferredOperations.push(c), b.dbReady ? b.dbReady = b.dbReady.then(function () { return c.promise; }) : b.dbReady = c.promise; }
            function p(a) { var b = ia[a.name], c = b.deferredOperations.pop(); c && c.resolve(); }
            function q(a, b) { return new ja(function (c, d) { if (a.db) {
                if (!b)
                    return c(a.db);
                o(a), a.db.close();
            } var e = [a.name]; b && e.push(a.version); var f = ga.open.apply(ga, e); b && (f.onupgradeneeded = function (b) { var c = f.result; try {
                c.createObjectStore(a.storeName), b.oldVersion <= 1 && c.createObjectStore(ka);
            }
            catch (c) {
                if ("ConstraintError" !== c.name)
                    throw c;
                console.warn('The database "' + a.name + '" has been upgraded from version ' + b.oldVersion + " to version " + b.newVersion + ', but the storage "' + a.storeName + '" already exists.');
            } }), f.onerror = function (a) { a.preventDefault(), d(f.error); }, f.onsuccess = function () { c(f.result), p(a); }; }); }
            function r(a) { return q(a, !1); }
            function s(a) { return q(a, !0); }
            function t(a, b) { if (!a.db)
                return !0; var c = !a.db.objectStoreNames.contains(a.storeName), d = a.version < a.db.version, e = a.version > a.db.version; if (d && (a.version !== b && console.warn('The database "' + a.name + "\" can't be downgraded from version " + a.db.version + " to version " + a.version + "."), a.version = a.db.version), e || c) {
                if (c) {
                    var f = a.db.version + 1;
                    f > a.version && (a.version = f);
                }
                return !0;
            } return !1; }
            function u(a) { return new ja(function (b, c) { var d = new FileReader; d.onerror = c, d.onloadend = function (c) { var d = btoa(c.target.result || ""); b({ __local_forage_encoded_blob: !0, data: d, type: a.type }); }, d.readAsBinaryString(a); }); }
            function v(a) { var b = l(atob(a.data)); return i([b], { type: a.type }); }
            function w(a) { return a && a.__local_forage_encoded_blob; }
            function x(a) { var b = this, c = b._initReady().then(function () { var a = ia[b._dbInfo.name]; if (a && a.dbReady)
                return a.dbReady; }); return k(c, a, a), c; }
            function y(a) { function b() { return ja.resolve(); } var c = this, d = { db: null }; if (a)
                for (var e in a)
                    d[e] = a[e]; ia || (ia = {}); var f = ia[d.name]; f || (f = { forages: [], db: null, dbReady: null, deferredOperations: [] }, ia[d.name] = f), f.forages.push(c), c._initReady || (c._initReady = c.ready, c.ready = x); for (var g = [], h = 0; h < f.forages.length; h++) {
                var i = f.forages[h];
                i !== c && g.push(i._initReady().catch(b));
            } var j = f.forages.slice(0); return ja.all(g).then(function () { return d.db = f.db, r(d); }).then(function (a) { return d.db = a, t(d, c._defaultConfig.version) ? s(d) : a; }).then(function (a) { d.db = f.db = a, c._dbInfo = d; for (var b = 0; b < j.length; b++) {
                var e = j[b];
                e !== c && (e._dbInfo.db = d.db, e._dbInfo.version = d.version);
            } }); }
            function z(a, b) { var c = this; "string" != typeof a && (console.warn(a + " used as a key, but it is not a string."), a = String(a)); var d = new ja(function (b, d) { c.ready().then(function () { var e = c._dbInfo, f = e.db.transaction(e.storeName, "readonly").objectStore(e.storeName), g = f.get(a); g.onsuccess = function () { var a = g.result; void 0 === a && (a = null), w(a) && (a = v(a)), b(a); }, g.onerror = function () { d(g.error); }; }).catch(d); }); return j(d, b), d; }
            function A(a, b) { var c = this, d = new ja(function (b, d) { c.ready().then(function () { var e = c._dbInfo, f = e.db.transaction(e.storeName, "readonly").objectStore(e.storeName), g = f.openCursor(), h = 1; g.onsuccess = function () { var c = g.result; if (c) {
                var d = c.value;
                w(d) && (d = v(d));
                var e = a(d, c.key, h++);
                void 0 !== e ? b(e) : c.continue();
            }
            else
                b(); }, g.onerror = function () { d(g.error); }; }).catch(d); }); return j(d, b), d; }
            function B(a, b, c) { var d = this; "string" != typeof a && (console.warn(a + " used as a key, but it is not a string."), a = String(a)); var e = new ja(function (c, e) { var f; d.ready().then(function () { return f = d._dbInfo, "[object Blob]" === la.call(b) ? n(f.db).then(function (a) { return a ? b : u(b); }) : b; }).then(function (b) { var d = f.db.transaction(f.storeName, "readwrite"), g = d.objectStore(f.storeName), h = g.put(b, a); null === b && (b = void 0), d.oncomplete = function () { void 0 === b && (b = null), c(b); }, d.onabort = d.onerror = function () { var a = h.error ? h.error : h.transaction.error; e(a); }; }).catch(e); }); return j(e, c), e; }
            function C(a, b) { var c = this; "string" != typeof a && (console.warn(a + " used as a key, but it is not a string."), a = String(a)); var d = new ja(function (b, d) { c.ready().then(function () { var e = c._dbInfo, f = e.db.transaction(e.storeName, "readwrite"), g = f.objectStore(e.storeName), h = g.delete(a); f.oncomplete = function () { b(); }, f.onerror = function () { d(h.error); }, f.onabort = function () { var a = h.error ? h.error : h.transaction.error; d(a); }; }).catch(d); }); return j(d, b), d; }
            function D(a) { var b = this, c = new ja(function (a, c) { b.ready().then(function () { var d = b._dbInfo, e = d.db.transaction(d.storeName, "readwrite"), f = e.objectStore(d.storeName), g = f.clear(); e.oncomplete = function () { a(); }, e.onabort = e.onerror = function () { var a = g.error ? g.error : g.transaction.error; c(a); }; }).catch(c); }); return j(c, a), c; }
            function E(a) { var b = this, c = new ja(function (a, c) { b.ready().then(function () { var d = b._dbInfo, e = d.db.transaction(d.storeName, "readonly").objectStore(d.storeName), f = e.count(); f.onsuccess = function () { a(f.result); }, f.onerror = function () { c(f.error); }; }).catch(c); }); return j(c, a), c; }
            function F(a, b) { var c = this, d = new ja(function (b, d) { return a < 0 ? void b(null) : void c.ready().then(function () { var e = c._dbInfo, f = e.db.transaction(e.storeName, "readonly").objectStore(e.storeName), g = !1, h = f.openCursor(); h.onsuccess = function () { var c = h.result; return c ? void (0 === a ? b(c.key) : g ? b(c.key) : (g = !0, c.advance(a))) : void b(null); }, h.onerror = function () { d(h.error); }; }).catch(d); }); return j(d, b), d; }
            function G(a) { var b = this, c = new ja(function (a, c) { b.ready().then(function () { var d = b._dbInfo, e = d.db.transaction(d.storeName, "readonly").objectStore(d.storeName), f = e.openCursor(), g = []; f.onsuccess = function () { var b = f.result; return b ? (g.push(b.key), void b.continue()) : void a(g); }, f.onerror = function () { c(f.error); }; }).catch(c); }); return j(c, a), c; }
            function H(a) { var b, c, d, e, f, g = .75 * a.length, h = a.length, i = 0; "=" === a[a.length - 1] && (g--, "=" === a[a.length - 2] && g--); var j = new ArrayBuffer(g), k = new Uint8Array(j); for (b = 0; b < h; b += 4)
                c = na.indexOf(a[b]), d = na.indexOf(a[b + 1]), e = na.indexOf(a[b + 2]), f = na.indexOf(a[b + 3]), k[i++] = c << 2 | d >> 4, k[i++] = (15 & d) << 4 | e >> 2, k[i++] = (3 & e) << 6 | 63 & f; return j; }
            function I(a) { var b, c = new Uint8Array(a), d = ""; for (b = 0; b < c.length; b += 3)
                d += na[c[b] >> 2], d += na[(3 & c[b]) << 4 | c[b + 1] >> 4], d += na[(15 & c[b + 1]) << 2 | c[b + 2] >> 6], d += na[63 & c[b + 2]]; return c.length % 3 === 2 ? d = d.substring(0, d.length - 1) + "=" : c.length % 3 === 1 && (d = d.substring(0, d.length - 2) + "=="), d; }
            function J(a, b) { var c = ""; if (a && (c = Ea.call(a)), a && ("[object ArrayBuffer]" === c || a.buffer && "[object ArrayBuffer]" === Ea.call(a.buffer))) {
                var d, e = qa;
                a instanceof ArrayBuffer ? (d = a, e += sa) : (d = a.buffer, "[object Int8Array]" === c ? e += ua : "[object Uint8Array]" === c ? e += va : "[object Uint8ClampedArray]" === c ? e += wa : "[object Int16Array]" === c ? e += xa : "[object Uint16Array]" === c ? e += za : "[object Int32Array]" === c ? e += ya : "[object Uint32Array]" === c ? e += Aa : "[object Float32Array]" === c ? e += Ba : "[object Float64Array]" === c ? e += Ca : b(new Error("Failed to get type for BinaryArray"))), b(e + I(d));
            }
            else if ("[object Blob]" === c) {
                var f = new FileReader;
                f.onload = function () { var c = oa + a.type + "~" + I(this.result); b(qa + ta + c); }, f.readAsArrayBuffer(a);
            }
            else
                try {
                    b(JSON.stringify(a));
                }
                catch (c) {
                    console.error("Couldn't convert value into a JSON string: ", a), b(null, c);
                } }
            function K(a) { if (a.substring(0, ra) !== qa)
                return JSON.parse(a); var b, c = a.substring(Da), d = a.substring(ra, Da); if (d === ta && pa.test(c)) {
                var e = c.match(pa);
                b = e[1], c = c.substring(e[0].length);
            } var f = H(c); switch (d) {
                case sa: return f;
                case ta: return i([f], { type: b });
                case ua: return new Int8Array(f);
                case va: return new Uint8Array(f);
                case wa: return new Uint8ClampedArray(f);
                case xa: return new Int16Array(f);
                case za: return new Uint16Array(f);
                case ya: return new Int32Array(f);
                case Aa: return new Uint32Array(f);
                case Ba: return new Float32Array(f);
                case Ca: return new Float64Array(f);
                default: throw new Error("Unkown type: " + d);
            } }
            function L(a) { var b = this, c = { db: null }; if (a)
                for (var d in a)
                    c[d] = "string" != typeof a[d] ? a[d].toString() : a[d]; var e = new ja(function (a, d) { try {
                c.db = openDatabase(c.name, String(c.version), c.description, c.size);
            }
            catch (a) {
                return d(a);
            } c.db.transaction(function (e) { e.executeSql("CREATE TABLE IF NOT EXISTS " + c.storeName + " (id INTEGER PRIMARY KEY, key unique, value)", [], function () { b._dbInfo = c, a(); }, function (a, b) { d(b); }); }); }); return c.serializer = Fa, e; }
            function M(a, b) { var c = this; "string" != typeof a && (console.warn(a + " used as a key, but it is not a string."), a = String(a)); var d = new ja(function (b, d) { c.ready().then(function () { var e = c._dbInfo; e.db.transaction(function (c) { c.executeSql("SELECT * FROM " + e.storeName + " WHERE key = ? LIMIT 1", [a], function (a, c) { var d = c.rows.length ? c.rows.item(0).value : null; d && (d = e.serializer.deserialize(d)), b(d); }, function (a, b) { d(b); }); }); }).catch(d); }); return j(d, b), d; }
            function N(a, b) { var c = this, d = new ja(function (b, d) { c.ready().then(function () { var e = c._dbInfo; e.db.transaction(function (c) { c.executeSql("SELECT * FROM " + e.storeName, [], function (c, d) { for (var f = d.rows, g = f.length, h = 0; h < g; h++) {
                var i = f.item(h), j = i.value;
                if (j && (j = e.serializer.deserialize(j)), j = a(j, i.key, h + 1), void 0 !== j)
                    return void b(j);
            } b(); }, function (a, b) { d(b); }); }); }).catch(d); }); return j(d, b), d; }
            function O(a, b, c, d) { var e = this; "string" != typeof a && (console.warn(a + " used as a key, but it is not a string."), a = String(a)); var f = new ja(function (f, g) { e.ready().then(function () { void 0 === b && (b = null); var h = b, i = e._dbInfo; i.serializer.serialize(b, function (b, j) { j ? g(j) : i.db.transaction(function (c) { c.executeSql("INSERT OR REPLACE INTO " + i.storeName + " (key, value) VALUES (?, ?)", [a, b], function () { f(h); }, function (a, b) { g(b); }); }, function (b) { if (b.code === b.QUOTA_ERR) {
                if (d > 0)
                    return void f(O.apply(e, [a, h, c, d - 1]));
                g(b);
            } }); }); }).catch(g); }); return j(f, c), f; }
            function P(a, b, c) { return O.apply(this, [a, b, c, 1]); }
            function Q(a, b) { var c = this; "string" != typeof a && (console.warn(a + " used as a key, but it is not a string."), a = String(a)); var d = new ja(function (b, d) { c.ready().then(function () { var e = c._dbInfo; e.db.transaction(function (c) { c.executeSql("DELETE FROM " + e.storeName + " WHERE key = ?", [a], function () { b(); }, function (a, b) { d(b); }); }); }).catch(d); }); return j(d, b), d; }
            function R(a) { var b = this, c = new ja(function (a, c) { b.ready().then(function () { var d = b._dbInfo; d.db.transaction(function (b) { b.executeSql("DELETE FROM " + d.storeName, [], function () { a(); }, function (a, b) { c(b); }); }); }).catch(c); }); return j(c, a), c; }
            function S(a) { var b = this, c = new ja(function (a, c) { b.ready().then(function () { var d = b._dbInfo; d.db.transaction(function (b) { b.executeSql("SELECT COUNT(key) as c FROM " + d.storeName, [], function (b, c) { var d = c.rows.item(0).c; a(d); }, function (a, b) { c(b); }); }); }).catch(c); }); return j(c, a), c; }
            function T(a, b) { var c = this, d = new ja(function (b, d) { c.ready().then(function () { var e = c._dbInfo; e.db.transaction(function (c) { c.executeSql("SELECT key FROM " + e.storeName + " WHERE id = ? LIMIT 1", [a + 1], function (a, c) { var d = c.rows.length ? c.rows.item(0).key : null; b(d); }, function (a, b) { d(b); }); }); }).catch(d); }); return j(d, b), d; }
            function U(a) { var b = this, c = new ja(function (a, c) { b.ready().then(function () { var d = b._dbInfo; d.db.transaction(function (b) { b.executeSql("SELECT key FROM " + d.storeName, [], function (b, c) { for (var d = [], e = 0; e < c.rows.length; e++)
                d.push(c.rows.item(e).key); a(d); }, function (a, b) { c(b); }); }); }).catch(c); }); return j(c, a), c; }
            function V(a) { var b = this, c = {}; if (a)
                for (var d in a)
                    c[d] = a[d]; return c.keyPrefix = c.name + "/", c.storeName !== b._defaultConfig.storeName && (c.keyPrefix += c.storeName + "/"), b._dbInfo = c, c.serializer = Fa, ja.resolve(); }
            function W(a) { var b = this, c = b.ready().then(function () { for (var a = b._dbInfo.keyPrefix, c = localStorage.length - 1; c >= 0; c--) {
                var d = localStorage.key(c);
                0 === d.indexOf(a) && localStorage.removeItem(d);
            } }); return j(c, a), c; }
            function X(a, b) { var c = this; "string" != typeof a && (console.warn(a + " used as a key, but it is not a string."), a = String(a)); var d = c.ready().then(function () { var b = c._dbInfo, d = localStorage.getItem(b.keyPrefix + a); return d && (d = b.serializer.deserialize(d)), d; }); return j(d, b), d; }
            function Y(a, b) { var c = this, d = c.ready().then(function () { for (var b = c._dbInfo, d = b.keyPrefix, e = d.length, f = localStorage.length, g = 1, h = 0; h < f; h++) {
                var i = localStorage.key(h);
                if (0 === i.indexOf(d)) {
                    var j = localStorage.getItem(i);
                    if (j && (j = b.serializer.deserialize(j)), j = a(j, i.substring(e), g++), void 0 !== j)
                        return j;
                }
            } }); return j(d, b), d; }
            function Z(a, b) { var c = this, d = c.ready().then(function () { var b, d = c._dbInfo; try {
                b = localStorage.key(a);
            }
            catch (a) {
                b = null;
            } return b && (b = b.substring(d.keyPrefix.length)), b; }); return j(d, b), d; }
            function $(a) { var b = this, c = b.ready().then(function () { for (var a = b._dbInfo, c = localStorage.length, d = [], e = 0; e < c; e++)
                0 === localStorage.key(e).indexOf(a.keyPrefix) && d.push(localStorage.key(e).substring(a.keyPrefix.length)); return d; }); return j(c, a), c; }
            function _(a) { var b = this, c = b.keys().then(function (a) { return a.length; }); return j(c, a), c; }
            function aa(a, b) { var c = this; "string" != typeof a && (console.warn(a + " used as a key, but it is not a string."), a = String(a)); var d = c.ready().then(function () { var b = c._dbInfo; localStorage.removeItem(b.keyPrefix + a); }); return j(d, b), d; }
            function ba(a, b, c) { var d = this; "string" != typeof a && (console.warn(a + " used as a key, but it is not a string."), a = String(a)); var e = d.ready().then(function () { void 0 === b && (b = null); var c = b; return new ja(function (e, f) { var g = d._dbInfo; g.serializer.serialize(b, function (b, d) { if (d)
                f(d);
            else
                try {
                    localStorage.setItem(g.keyPrefix + a, b), e(c);
                }
                catch (a) {
                    "QuotaExceededError" !== a.name && "NS_ERROR_DOM_QUOTA_REACHED" !== a.name || f(a), f(a);
                } }); }); }); return j(e, c), e; }
            function ca(a, b) { a[b] = function () { var c = arguments; return a.ready().then(function () { return a[b].apply(a, c); }); }; }
            function da() { for (var a = 1; a < arguments.length; a++) {
                var b = arguments[a];
                if (b)
                    for (var c in b)
                        b.hasOwnProperty(c) && (Oa(b[c]) ? arguments[0][c] = b[c].slice() : arguments[0][c] = b[c]);
            } return arguments[0]; }
            function ea(a) { for (var b in Ja)
                if (Ja.hasOwnProperty(b) && Ja[b] === a)
                    return !0; return !1; }
            var fa = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (a) { return typeof a; } : function (a) { return a && "function" == typeof Symbol && a.constructor === Symbol && a !== Symbol.prototype ? "symbol" : typeof a; }, ga = e();
            "undefined" == typeof Promise && a(3);
            var ha, ia, ja = Promise, ka = "local-forage-detect-blob-support", la = Object.prototype.toString, ma = { _driver: "asyncStorage", _initStorage: y, iterate: A, getItem: z, setItem: B, removeItem: C, clear: D, length: E, key: F, keys: G }, na = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", oa = "~~local_forage_type~", pa = /^~~local_forage_type~([^~]+)~/, qa = "__lfsc__:", ra = qa.length, sa = "arbf", ta = "blob", ua = "si08", va = "ui08", wa = "uic8", xa = "si16", ya = "si32", za = "ur16", Aa = "ui32", Ba = "fl32", Ca = "fl64", Da = ra + sa.length, Ea = Object.prototype.toString, Fa = { serialize: J, deserialize: K, stringToBuffer: H, bufferToString: I }, Ga = { _driver: "webSQLStorage", _initStorage: L, iterate: N, getItem: M, setItem: P, removeItem: Q, clear: R, length: S, key: T, keys: U }, Ha = { _driver: "localStorageWrapper", _initStorage: V, iterate: Y, getItem: X, setItem: ba, removeItem: aa, clear: W, length: _, key: Z, keys: $ }, Ia = {}, Ja = { INDEXEDDB: "asyncStorage", LOCALSTORAGE: "localStorageWrapper", WEBSQL: "webSQLStorage" }, Ka = [Ja.INDEXEDDB, Ja.WEBSQL, Ja.LOCALSTORAGE], La = ["clear", "getItem", "iterate", "key", "keys", "length", "removeItem", "setItem"], Ma = { description: "", driver: Ka.slice(), name: "localforage", size: 4980736, storeName: "keyvaluepairs", version: 1 }, Na = {};
            Na[Ja.INDEXEDDB] = f(), Na[Ja.WEBSQL] = g(), Na[Ja.LOCALSTORAGE] = h();
            var Oa = Array.isArray || function (a) { return "[object Array]" === Object.prototype.toString.call(a); }, Pa = function () { function a(b) { d(this, a), this.INDEXEDDB = Ja.INDEXEDDB, this.LOCALSTORAGE = Ja.LOCALSTORAGE, this.WEBSQL = Ja.WEBSQL, this._defaultConfig = da({}, Ma), this._config = da({}, this._defaultConfig, b), this._driverSet = null, this._initDriver = null, this._ready = !1, this._dbInfo = null, this._wrapLibraryMethodsWithReady(), this.setDriver(this._config.driver).catch(function () { }); } return a.prototype.config = function (a) { if ("object" === ("undefined" == typeof a ? "undefined" : fa(a))) {
                if (this._ready)
                    return new Error("Can't call config() after localforage has been used.");
                for (var b in a) {
                    if ("storeName" === b && (a[b] = a[b].replace(/\W/g, "_")), "version" === b && "number" != typeof a[b])
                        return new Error("Database version must be a number.");
                    this._config[b] = a[b];
                }
                return !("driver" in a && a.driver) || this.setDriver(this._config.driver);
            } return "string" == typeof a ? this._config[a] : this._config; }, a.prototype.defineDriver = function (a, b, c) { var d = new ja(function (b, c) { try {
                var d = a._driver, e = new Error("Custom driver not compliant; see https://mozilla.github.io/localForage/#definedriver"), f = new Error("Custom driver name already in use: " + a._driver);
                if (!a._driver)
                    return void c(e);
                if (ea(a._driver))
                    return void c(f);
                for (var g = La.concat("_initStorage"), h = 0; h < g.length; h++) {
                    var i = g[h];
                    if (!i || !a[i] || "function" != typeof a[i])
                        return void c(e);
                }
                var j = ja.resolve(!0);
                "_support" in a && (j = a._support && "function" == typeof a._support ? a._support() : ja.resolve(!!a._support)), j.then(function (c) { Na[d] = c, Ia[d] = a, b(); }, c);
            }
            catch (a) {
                c(a);
            } }); return k(d, b, c), d; }, a.prototype.driver = function () { return this._driver || null; }, a.prototype.getDriver = function (a, b, c) { var d = this, e = ja.resolve().then(function () { if (!ea(a)) {
                if (Ia[a])
                    return Ia[a];
                throw new Error("Driver not found.");
            } switch (a) {
                case d.INDEXEDDB: return ma;
                case d.LOCALSTORAGE: return Ha;
                case d.WEBSQL: return Ga;
            } }); return k(e, b, c), e; }, a.prototype.getSerializer = function (a) { var b = ja.resolve(Fa); return k(b, a), b; }, a.prototype.ready = function (a) { var b = this, c = b._driverSet.then(function () { return null === b._ready && (b._ready = b._initDriver()), b._ready; }); return k(c, a, a), c; }, a.prototype.setDriver = function (a, b, c) { function d() { g._config.driver = g.driver(); } function e(a) { return g._extend(a), d(), g._ready = g._initStorage(g._config), g._ready; } function f(a) { return function () { function b() { for (; c < a.length;) {
                var f = a[c];
                return c++, g._dbInfo = null, g._ready = null, g.getDriver(f).then(e).catch(b);
            } d(); var h = new Error("No available storage method found."); return g._driverSet = ja.reject(h), g._driverSet; } var c = 0; return b(); }; } var g = this; Oa(a) || (a = [a]); var h = this._getSupportedDrivers(a), i = null !== this._driverSet ? this._driverSet.catch(function () { return ja.resolve(); }) : ja.resolve(); return this._driverSet = i.then(function () { var a = h[0]; return g._dbInfo = null, g._ready = null, g.getDriver(a).then(function (a) { g._driver = a._driver, d(), g._wrapLibraryMethodsWithReady(), g._initDriver = f(h); }); }).catch(function () { d(); var a = new Error("No available storage method found."); return g._driverSet = ja.reject(a), g._driverSet; }), k(this._driverSet, b, c), this._driverSet; }, a.prototype.supports = function (a) { return !!Na[a]; }, a.prototype._extend = function (a) { da(this, a); }, a.prototype._getSupportedDrivers = function (a) { for (var b = [], c = 0, d = a.length; c < d; c++) {
                var e = a[c];
                this.supports(e) && b.push(e);
            } return b; }, a.prototype._wrapLibraryMethodsWithReady = function () { for (var a = 0; a < La.length; a++)
                ca(this, La[a]); }, a.prototype.createInstance = function (b) { return new a(b); }, a; }(), Qa = new Pa;
            b.exports = Qa;
        }, { 3: 3 }] }, {}, [4])(4); });

//# sourceMappingURL=data:application/json;charset=utf8;base64,
